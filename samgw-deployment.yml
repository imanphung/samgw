apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
data:
  JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET: MjgwOTBlNTk2ZWZmNGYwYzFjMzczOGZmNTk0Y2E1ZDBkOGM3Y2MwM2Y5YzBhOTE3ZjcxZjFjZGVhZWMxOTRmMDA3NDdjNzdhNjgwNTUyNWIzNTgxNDEzMWQzYzFhODk5Y2MzYjEwMTkyMjI2YTZmYzQxZDAyZWVhMGE0NzQxNzM=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: samgw
  namespace: samhello
spec:
  replicas: 1
  selector:
    matchLabels:
      app: samgw
      version: 'v1'
  template:
    metadata:
      labels:
        app: samgw
        version: 'v1'
    spec:
      containers:
        - name: samgw-app
          image: antphungit/samgw
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              valueFrom:
                secretKeyRef:
                  name: jwt-secret
                  key: secret
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://samgw-postgresql.samhello.svc.cluster.local:5432/samgw
            - name: SPRING_DATASOURCE_USERNAME
              value: samgw
            - name: SPRING_R2DBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: samgw-postgresql
                  key: postgresql-password
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:postgresql://samgw-postgresql.samhello.svc.cluster.local:5432/samgw
            - name: SPRING_R2DBC_URL
              value: r2dbc:postgresql://samgw-postgresql.samhello.svc.cluster.local:5432/samgw
            - name: SPRING_SLEUTH_PROPAGATION_KEYS
              value: 'x-request-id,x-ot-span-context'
            - name: JAVA_OPTS
              value: ' -Xmx256m -Xms256m'
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: '512Mi'
              cpu: '500m'
            limits:
              memory: '1Gi'
              cpu: '1'
          ports:
            - name: http
              containerPort: 8080
          # readinessProbe:
          #   httpGet:
          #     path: /management/health/readiness
          #     port: http
          #   initialDelaySeconds: 150
          #   periodSeconds: 15
          #   failureThreshold: 6
          # livenessProbe:
          #   httpGet:
          #     path: /management/health/liveness
          #     port: http
          #   initialDelaySeconds: 120
---
apiVersion: v1
kind: Service
metadata:
  name: samgw
  namespace: samhello
  labels:
    app: samgw
spec:
  selector:
    app: samgw
  type: NodePort
  ports:
    - name: http
      port: 80
      targetPort: 8080
---
apiVersion: v1
kind: Secret
metadata:
  name: samgw-postgresql
  namespace: samhello
  labels:
    app: samgw-postgresql
type: Opaque
data:
  postgresql-password: ZTZkOTc3NzQzOGZhYTg2MDQ1ZjY5ZmUzZmVmY2IwY2QzZjZjOTMwOWZkNzQ5ZjE4OTE3NWUwZmFmZDQ5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: samgw-postgresql
  namespace: samhello
spec:
  replicas: 1
  selector:
    matchLabels:
      app: samgw-postgresql
  template:
    metadata:
      labels:
        app: samgw-postgresql
    spec:
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: postgres
          image: postgres:14.2
          env:
            - name: POSTGRES_USER
              value: samgw
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: samgw-postgresql
                  key: postgresql-password
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          resources:
            requests:
              memory: '512Mi'
              cpu: '500m'
            limits:
              memory: '512Mi'
              cpu: '500m'
---
apiVersion: v1
kind: Service
metadata:
  name: samgw-postgresql
  namespace: samhello
spec:
  selector:
    app: samgw-postgresql
  ports:
    - port: 5432